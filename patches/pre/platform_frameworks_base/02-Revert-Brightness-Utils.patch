From b4e517ee2edb226ce28abbb7f9911a84feea06dc Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Thu, 26 Oct 2023 22:24:51 +0000
Subject: [PATCH 1/2] Revert "BrightnessUtils: Allow maintainer to set desired
 brightness curve impl"

This reverts commit 76ee72f0c8149f57b1809659c54cc255191c2632.
---
 .../settingslib/display/BrightnessUtils.java  | 35 +++----------------
 1 file changed, 5 insertions(+), 30 deletions(-)

diff --git a/packages/SettingsLib/src/com/android/settingslib/display/BrightnessUtils.java b/packages/SettingsLib/src/com/android/settingslib/display/BrightnessUtils.java
index 74e556ce50aa..e4490c851081 100644
--- a/packages/SettingsLib/src/com/android/settingslib/display/BrightnessUtils.java
+++ b/packages/SettingsLib/src/com/android/settingslib/display/BrightnessUtils.java
@@ -16,18 +16,14 @@
 
 package com.android.settingslib.display;
 
-import android.os.SystemProperties;
 import android.util.MathUtils;
 
 import com.android.internal.display.BrightnessSynchronizer;
 
 public class BrightnessUtils {
 
-    public static final boolean sysUseLowGamma = Boolean.parseBoolean(
-        SystemProperties.get("persist.sys.brightness.low.gamma", "false"));
-
     public static final int GAMMA_SPACE_MIN = 0;
-    public static final int GAMMA_SPACE_MAX = sysUseLowGamma ? 255 : 65535;
+    public static final int GAMMA_SPACE_MAX = 255;
 
     // Hybrid Log Gamma constant values
     private static final float R = 0.5f;
@@ -81,20 +77,8 @@ public class BrightnessUtils {
      * @return The corresponding setting value.
      */
     public static final float convertGammaToLinearFloat(int val, float min, float max) {
-        final float normalizedVal = MathUtils.norm(GAMMA_SPACE_MIN, GAMMA_SPACE_MAX, val);
-        final float ret;
-        if (normalizedVal <= R) {
-            ret = MathUtils.sq(normalizedVal / R);
-        } else {
-            ret = MathUtils.exp((normalizedVal - C) / A) + B;
-        }
-
-        // HLG is normalized to the range [0, 12], ensure that value is within that range,
-        // it shouldn't be out of bounds.
-        final float normalizedRet = MathUtils.constrain(ret, 0, 12);
-
-        return sysUseLowGamma ? MathUtils.constrain(BrightnessSynchronizer.brightnessIntToFloat(val),
-                         min, max) : MathUtils.lerp(min, max, normalizedRet / 12);
+        return MathUtils.constrain(BrightnessSynchronizer.brightnessIntToFloat(val),
+                         min, max);
     }
 
     /**
@@ -132,16 +116,7 @@ public class BrightnessUtils {
      * @return The corresponding slider value
      */
     public static final int convertLinearToGammaFloat(float val, float min, float max) {
-        // For some reason, HLG normalizes to the range [0, 12] rather than [0, 1]
-        final float normalizedVal = MathUtils.norm(min, max, val) * 12;
-        final float ret;
-        if (normalizedVal <= 1f) {
-            ret = MathUtils.sqrt(normalizedVal) * R;
-        } else {
-            ret = A * MathUtils.log(normalizedVal - B) + C;
-        }
-
-        return sysUseLowGamma ? BrightnessSynchronizer.brightnessFloatToInt(
-                       MathUtils.constrain(val, min, max)) : Math.round(MathUtils.lerp(GAMMA_SPACE_MIN, GAMMA_SPACE_MAX, ret));
+        return BrightnessSynchronizer.brightnessFloatToInt(
+                       MathUtils.constrain(val, min, max));
     }
 }
-- 
2.34.1


From 36389e71c587ca42c4fd64f3b080e76fa64c9e27 Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Thu, 26 Oct 2023 22:25:11 +0000
Subject: [PATCH 2/2] Revert "base: Fix brightness slider curve for some
 devices"

This reverts commit c099770904d38b5c1a2cf2efb53ebbe3bce400e8.
---
 .../settingslib/display/BrightnessUtils.java  | 33 +++++++++++++++----
 1 file changed, 26 insertions(+), 7 deletions(-)

diff --git a/packages/SettingsLib/src/com/android/settingslib/display/BrightnessUtils.java b/packages/SettingsLib/src/com/android/settingslib/display/BrightnessUtils.java
index e4490c851081..4f86afaa995c 100644
--- a/packages/SettingsLib/src/com/android/settingslib/display/BrightnessUtils.java
+++ b/packages/SettingsLib/src/com/android/settingslib/display/BrightnessUtils.java
@@ -18,12 +18,10 @@ package com.android.settingslib.display;
 
 import android.util.MathUtils;
 
-import com.android.internal.display.BrightnessSynchronizer;
-
 public class BrightnessUtils {
 
     public static final int GAMMA_SPACE_MIN = 0;
-    public static final int GAMMA_SPACE_MAX = 255;
+    public static final int GAMMA_SPACE_MAX = 65535;
 
     // Hybrid Log Gamma constant values
     private static final float R = 0.5f;
@@ -77,8 +75,21 @@ public class BrightnessUtils {
      * @return The corresponding setting value.
      */
     public static final float convertGammaToLinearFloat(int val, float min, float max) {
-        return MathUtils.constrain(BrightnessSynchronizer.brightnessIntToFloat(val),
-                         min, max);
+        final float normalizedVal = MathUtils.norm(GAMMA_SPACE_MIN, GAMMA_SPACE_MAX, val);
+        final float ret;
+        if (normalizedVal <= R) {
+            ret = MathUtils.sq(normalizedVal / R);
+        } else {
+            ret = MathUtils.exp((normalizedVal - C) / A) + B;
+        }
+
+        // HLG is normalized to the range [0, 12], ensure that value is within that range,
+        // it shouldn't be out of bounds.
+        final float normalizedRet = MathUtils.constrain(ret, 0, 12);
+
+        // Re-normalize to the range [0, 1]
+        // in order to derive the correct setting value.
+        return MathUtils.lerp(min, max, normalizedRet / 12);
     }
 
     /**
@@ -116,7 +127,15 @@ public class BrightnessUtils {
      * @return The corresponding slider value
      */
     public static final int convertLinearToGammaFloat(float val, float min, float max) {
-        return BrightnessSynchronizer.brightnessFloatToInt(
-                       MathUtils.constrain(val, min, max));
+        // For some reason, HLG normalizes to the range [0, 12] rather than [0, 1]
+        final float normalizedVal = MathUtils.norm(min, max, val) * 12;
+        final float ret;
+        if (normalizedVal <= 1f) {
+            ret = MathUtils.sqrt(normalizedVal) * R;
+        } else {
+            ret = A * MathUtils.log(normalizedVal - B) + C;
+        }
+
+        return Math.round(MathUtils.lerp(GAMMA_SPACE_MIN, GAMMA_SPACE_MAX, ret));
     }
 }
-- 
2.34.1

