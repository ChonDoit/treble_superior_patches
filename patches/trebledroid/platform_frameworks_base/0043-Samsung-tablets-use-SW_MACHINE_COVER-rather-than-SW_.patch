From 0f32e648ea20ab36b2eb87395f653dbfdc6e435f Mon Sep 17 00:00:00 2001
From: Pierre-Hugues Husson <phh@phh.me>
Date: Wed, 18 Oct 2023 16:57:34 -0400
Subject: [PATCH] Samsung tablets use SW_MACHINE_COVER rather than SW_LID

So check whether SW_MACHINE_COVER is declared, then use it
Otherwise stick to SW_LID

Should fix https://github.com/phhusson/treble_experimentations/issues/2572
---
 .../server/input/InputManagerService.java     | 25 ++++++++++++++++---
 1 file changed, 21 insertions(+), 4 deletions(-)

diff --git a/services/core/java/com/android/server/input/InputManagerService.java b/services/core/java/com/android/server/input/InputManagerService.java
index aaa28f0481e4..bdebfffb4f96 100644
--- a/services/core/java/com/android/server/input/InputManagerService.java
+++ b/services/core/java/com/android/server/input/InputManagerService.java
@@ -375,6 +375,9 @@ public class InputManagerService extends IInputManager.Stub
     /** Switch code: Microphone. When set it is off. */
     public static final int SW_MUTE_DEVICE = 0x0e;
 
+    /** Switch code: Cover. When set, the cover is closed. */
+    public static final int SW_MACHINE_COVER = 0x10;
+
     public static final int SW_LID_BIT = 1 << SW_LID;
     public static final int SW_TABLET_MODE_BIT = 1 << SW_TABLET_MODE;
     public static final int SW_KEYPAD_SLIDE_BIT = 1 << SW_KEYPAD_SLIDE;
@@ -386,6 +389,8 @@ public class InputManagerService extends IInputManager.Stub
             SW_HEADPHONE_INSERT_BIT | SW_MICROPHONE_INSERT_BIT | SW_JACK_PHYSICAL_INSERT_BIT | SW_LINEOUT_INSERT_BIT;
     public static final int SW_CAMERA_LENS_COVER_BIT = 1 << SW_CAMERA_LENS_COVER;
     public static final int SW_MUTE_DEVICE_BIT = 1 << SW_MUTE_DEVICE;
+    public static final int SW_MACHINE_COVER_BIT = 1 << SW_MACHINE_COVER;
+    private int mSwForLid = SW_LID;
 
     /** Whether to use the dev/input/event or uevent subsystem for the audio jack. */
     final boolean mUseDevInputEventForAudioJack;
@@ -458,6 +463,16 @@ public class InputManagerService extends IInputManager.Stub
         mWiredAccessoryCallbacks = callbacks;
     }
 
+    private void checkForSwMachineCover() {
+        int machineCoverState = getSwitchState(-1 /* deviceId */, InputDevice.SOURCE_ANY, SW_MACHINE_COVER);
+        if (machineCoverState != KEY_STATE_UNKNOWN) {
+            android.util.Log.e("PHH", "Found a SW_MACHINE_COVER. Use this instead of SW_LID");
+            mSwForLid = SW_MACHINE_COVER;
+        } else {
+            android.util.Log.e("PHH", "Not found a SW_MACHINE_COVER");
+        }
+    }
+
     void registerLidSwitchCallbackInternal(@NonNull LidSwitchCallback callback) {
         synchronized (mLidSwitchLock) {
             mLidSwitchCallbacks.add(callback);
@@ -466,7 +481,8 @@ public class InputManagerService extends IInputManager.Stub
             // state will be reported as KEY_STATE_UNKNOWN. The callback will be triggered in
             // systemRunning().
             if (mSystemReady) {
-                boolean lidOpen = getSwitchState(-1 /* deviceId */, InputDevice.SOURCE_ANY, SW_LID)
+                checkForSwMachineCover();
+                boolean lidOpen = getSwitchState(-1 /* deviceId */, InputDevice.SOURCE_ANY, mSwForLid)
                         == KEY_STATE_UP;
                 callback.notifyLidSwitchChanged(0 /* whenNanos */, lidOpen);
             }
@@ -524,7 +540,8 @@ public class InputManagerService extends IInputManager.Stub
 
             // Send the initial lid switch state to any callback registered before the system was
             // ready.
-            int switchState = getSwitchState(-1 /* deviceId */, InputDevice.SOURCE_ANY, SW_LID);
+            checkForSwMachineCover();
+            int switchState = getSwitchState(-1 /* deviceId */, InputDevice.SOURCE_ANY, mSwForLid);
             for (int i = 0; i < mLidSwitchCallbacks.size(); i++) {
                 LidSwitchCallback callback = mLidSwitchCallbacks.get(i);
                 callback.notifyLidSwitchChanged(0 /* whenNanos */, switchState == KEY_STATE_UP);
@@ -2861,8 +2878,8 @@ public class InputManagerService extends IInputManager.Stub
                     + ", mask=" + Integer.toHexString(switchMask));
         }
 
-        if ((switchMask & SW_LID_BIT) != 0) {
-            final boolean lidOpen = ((switchValues & SW_LID_BIT) == 0);
+        if ((switchMask & (1 << mSwForLid)) != 0) {
+            final boolean lidOpen = ((switchValues & (1 << mSwForLid)) == 0);
             synchronized (mLidSwitchLock) {
                 if (mSystemReady) {
                     for (int i = 0; i < mLidSwitchCallbacks.size(); i++) {
-- 
2.34.1

