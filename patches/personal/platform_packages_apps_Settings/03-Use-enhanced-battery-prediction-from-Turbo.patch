From ef209a05f16278db225ab91f5d644f380f5a9f36 Mon Sep 17 00:00:00 2001
From: Joe Maples <joe@frap129.org>
Date: Mon, 20 Aug 2018 18:37:48 -0400
Subject: [PATCH] fuelgauge: Use Enhanced Battery Prediction from Turbo

Turbo keeps track of usage and produces a much more accurate
battery life estimate than AOSP, so let's use that instead.

Fix force close on android12's battery xml.

Change-Id: I13af1c90c502831a3681f40a1819d7d99d107f88
Signed-off-by: Joe Maples <joe@frap129.org>
---
 .../PowerUsageFeatureProviderImpl.java        | 161 +++++++++++++++++-
 1 file changed, 156 insertions(+), 5 deletions(-)

diff --git a/src/com/android/settings/fuelgauge/PowerUsageFeatureProviderImpl.java b/src/com/android/settings/fuelgauge/PowerUsageFeatureProviderImpl.java
index cc802e8d30a..8b1142ddc3c 100644
--- a/src/com/android/settings/fuelgauge/PowerUsageFeatureProviderImpl.java
+++ b/src/com/android/settings/fuelgauge/PowerUsageFeatureProviderImpl.java
@@ -16,11 +16,16 @@
 
 package com.android.settings.fuelgauge;
 
+import android.content.ContentResolver;
 import android.content.Context;
 import android.content.Intent;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
+import android.database.Cursor;
 import android.net.Uri;
 import android.os.Process;
+import android.text.TextUtils;
 import android.util.ArraySet;
 import android.util.SparseIntArray;
 
@@ -28,7 +33,11 @@
 import com.android.settings.R;
 import com.android.settings.fuelgauge.batteryusage.BatteryHistEntry;
 import com.android.settingslib.fuelgauge.Estimate;
+import com.android.settingslib.utils.PowerUtil;
 
+import java.util.ArrayList;
+import java.time.Duration;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
@@ -38,8 +47,20 @@ public class PowerUsageFeatureProviderImpl implements PowerUsageFeatureProvider
     private static final String PACKAGE_CALENDAR_PROVIDER = "com.android.providers.calendar";
     private static final String PACKAGE_MEDIA_PROVIDER = "com.android.providers.media";
     private static final String PACKAGE_SYSTEMUI = "com.android.systemui";
+    private static final String PACKAGE_GMS = "com.google.android.gms";
+    private static final String PACKAGE_GCS = "com.google.android.apps.gcs";
     private static final String[] PACKAGES_SYSTEM = {PACKAGE_MEDIA_PROVIDER,
             PACKAGE_CALENDAR_PROVIDER, PACKAGE_SYSTEMUI};
+    private static final String[] PACKAGES_SERVICE = {PACKAGE_GMS, PACKAGE_GCS};
+
+    static final String AVERAGE_BATTERY_LIFE_COL = "average_battery_life";
+    static final String BATTERY_ESTIMATE_BASED_ON_USAGE_COL = "is_based_on_usage";
+    static final String BATTERY_ESTIMATE_COL = "battery_estimate";
+    static final String BATTERY_LEVEL_COL = "battery_level";
+    static final String IS_EARLY_WARNING_COL = "is_early_warning";
+    static final String TIMESTAMP_COL = "timestamp_millis";
+    static final int CUSTOMIZED_TO_USER = 1;
+    static final int NEED_EARLY_WARNING = 1;
 
     protected PackageManager mPackageManager;
     protected Context mContext;
@@ -96,17 +117,113 @@ public boolean isPowerAccountingToggleEnabled() {
 
     @Override
     public Estimate getEnhancedBatteryPrediction(Context context) {
-        return null;
+        long dischargeTime = -1L;
+        boolean basedOnUsage = false;
+        Uri uri = this.getEnhancedBatteryPredictionUri();
+        Cursor cursor = context.getContentResolver().query(uri, null, null, null, null);
+
+        // Return null if cursor is null or empty
+        if (cursor == null || !cursor.moveToFirst()) {
+            try {
+                cursor.close();
+            }
+            catch (NullPointerException nullPointerException) {
+                 // cursor might be null
+            }
+            return null;
+        }
+
+        // Check if estimate is usage based
+        int colIndex = cursor.getColumnIndex(BATTERY_ESTIMATE_BASED_ON_USAGE_COL);
+        if (colIndex != -1)
+            basedOnUsage = cursor.getInt(colIndex) == 1;
+
+        // Calculate average discharge time based on average battery life
+        colIndex = cursor.getColumnIndex(AVERAGE_BATTERY_LIFE_COL);
+        if (colIndex != -1) {
+            long avgBattery = cursor.getLong(colIndex);
+            if (avgBattery != -1L) {
+                dischargeTime = Duration.ofMinutes(15L).toMillis();
+                if (Duration.ofMillis(avgBattery).compareTo(Duration.ofDays(1L)) >= 0)
+                    dischargeTime = Duration.ofHours(1L).toMillis();
+                dischargeTime = PowerUtil.roundTimeToNearestThreshold(avgBattery, dischargeTime);
+            }
+        }
+
+        // Create estimate from data
+        colIndex = cursor.getColumnIndex(BATTERY_ESTIMATE_COL);
+        Estimate enhancedEstimate = new Estimate(cursor.getLong(colIndex),
+                                                 basedOnUsage, dischargeTime);
+
+        // Cleanup
+        try {
+            cursor.close();
+        }
+        catch (NullPointerException nullPointerException) {
+            // We already checked if cursor is null, so it shouldn't be dereferenced yet.
+        }
+
+        return enhancedEstimate;
     }
 
     @Override
     public SparseIntArray getEnhancedBatteryPredictionCurve(Context context, long zeroTime) {
-        return null;
+        SparseIntArray curve = new SparseIntArray();
+        Uri uri = this.getEnhancedBatteryPredictionCurveUri();
+        Cursor cursor = context.getContentResolver().query(uri, null, null, null, null);
+
+        // Return null if cursor is null or empty
+        if (cursor == null || !cursor.moveToFirst()) {
+            try {
+                cursor.close();
+            }
+            catch (NullPointerException nullPointerException) {
+                 // cursor might be null
+            }
+            return null;
+        }
+
+        // Get time/battery data indicies
+        int timestamp = cursor.getColumnIndex(TIMESTAMP_COL);
+        int batteryLevel = cursor.getColumnIndex(BATTERY_LEVEL_COL);
+
+        // Add time/battery data to a SparseIntArray and shift time data relative to starting time
+        while (cursor.moveToNext()) {
+            curve.append((int)(cursor.getLong(timestamp) - zeroTime), cursor.getInt(batteryLevel));
+        }
+
+        // Cleanup
+        try {
+            cursor.close();
+        }
+        catch (NullPointerException nullPointerException) {
+            // We already checked if cursor is null, so it shouldn't be dereferenced yet.
+        }
+        return curve;
+    }
+
+    private Uri getEnhancedBatteryPredictionCurveUri() {
+        return new Uri.Builder().scheme("content")
+                                .authority("com.google.android.apps.turbo.estimated_time_remaining")
+                                .appendPath("discharge_curve").build();
+    }
+
+    private Uri getEnhancedBatteryPredictionUri() {
+        return new Uri.Builder().scheme("content")
+                                .authority("com.google.android.apps.turbo.estimated_time_remaining")
+                                .appendPath("time_remaining").build();
     }
 
     @Override
     public boolean isEnhancedBatteryPredictionEnabled(Context context) {
-        return false;
+        try {
+            boolean turboEnabled = mPackageManager.getPackageInfo("com.google.android.apps.turbo",
+                                    PackageManager.MATCH_DISABLED_COMPONENTS).applicationInfo.enabled;
+            return turboEnabled;
+        }
+        catch (PackageManager.NameNotFoundException nameNotFoundException) {
+            return false;
+        }
     }
 
     @Override
@@ -126,12 +243,46 @@ public String getOldEstimateDebugString(String timeRemaining) {
 
     @Override
     public String getAdvancedUsageScreenInfoString() {
-        return null;
+        return mContext.getString(R.string.advanced_battery_graph_subtext);
     }
 
     @Override
     public boolean getEarlyWarningSignal(Context context, String id) {
-        return false;
+        // Build early warning URI and create a cursor to read it
+        Uri.Builder builder = new Uri.Builder().scheme("content")
+                                            .authority("com.google.android.apps.turbo.estimated_time_remaining")
+                                            .appendPath("early_warning")
+                                            .appendPath("id");
+        if (TextUtils.isEmpty(id)) {
+            builder.appendPath(context.getPackageName());
+        } else {
+            builder.appendPath(id);
+        }
+        Cursor cursor = context.getContentResolver().query(builder.build(), null, null, null, null);
+
+        // Return null if cursor is null or empty
+        if (cursor == null || !cursor.moveToFirst()) {
+            try {
+                cursor.close();
+            }
+            catch (NullPointerException nullPointerException) {
+                 // cursor might be null
+            }
+            return false;
+        }
+
+        // Check if early warning is available
+        boolean earlyWarningAvailable  = cursor.getInt(cursor.getColumnIndex(IS_EARLY_WARNING_COL)) == 1;
+
+        // Cleanup
+        try {
+            cursor.close();
+        }
+        catch (NullPointerException nullPointerException) {
+            // We already checked if cursor is null, so it shouldn't be dereferenced yet.
+        }
+
+        return earlyWarningAvailable;
     }
 
     @Override
