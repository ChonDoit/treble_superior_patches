From 53b95fca57d2325fd517340dac2e924d420fa8a3 Mon Sep 17 00:00:00 2001
From: Pierre-Hugues Husson <phh@phh.me>
Date: Wed, 20 Oct 2021 09:39:47 -0400
Subject: [PATCH 07/17] Try to fallback mCallingSid to getpidcon

This is needed because old vendors (before April 2019 ~) don't support
reporting SELinux context of the caller.
This doesn't work for all processes, because it requires some additional
SELinux permissions. At the moment, only keystore2 requires this

Change-Id: I3b6c4dac9d0e20a3d66f931b283e3a535ab499cd
---
 libs/binder/IPCThreadState.cpp | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)

diff --git a/libs/binder/IPCThreadState.cpp b/libs/binder/IPCThreadState.cpp
index c415ea02e2..66d790af4b 100644
--- a/libs/binder/IPCThreadState.cpp
+++ b/libs/binder/IPCThreadState.cpp
@@ -36,6 +36,7 @@
 #include <sched.h>
 #include <signal.h>
 #include <stdio.h>
+#include <stdlib.h>
 #include <sys/ioctl.h>
 #include <sys/resource.h>
 #include <unistd.h>
@@ -1246,6 +1247,25 @@ status_t IPCThreadState::executeCommand(int32_t cmd)
             mCallingUid = tr.sender_euid;
             mLastTransactionBinderFlags = tr.flags;
 
+            // This is recoding libselinux's getpidcon(). We are in a NDK lib, so we need to keep changes to a minimum
+            bool allocatedSid = false;
+            if (mCallingSid == nullptr && mCallingPid != 0) {
+                char buf[4096];
+                char *path = NULL;
+                (void)asprintf(&path, "/proc/%d/attr/current", mCallingPid);
+                int fd = open(path, O_RDONLY | O_CLOEXEC);
+                if (fd != -1) {
+                    int readRet = read(fd, buf, sizeof(buf)-1);
+                    if(readRet != -1) {
+                        buf[readRet] = 0;
+                        mCallingSid = strdup(buf);
+                        allocatedSid = true;
+                    }
+                    close(fd);
+                }
+                free(path);
+            }
+
             // ALOGI(">>>> TRANSACT from pid %d sid %s uid %d\n", mCallingPid,
             //    (mCallingSid ? mCallingSid : "<N/A>"), mCallingUid);
 
@@ -1310,6 +1330,7 @@ status_t IPCThreadState::executeCommand(int32_t cmd)
 
             mServingStackPointer = origServingStackPointer;
             mCallingPid = origPid;
+	    if (allocatedSid) free((void*)mCallingSid);
             mCallingSid = origSid;
             mCallingUid = origUid;
             mStrictModePolicy = origStrictModePolicy;
-- 
2.25.1

